{"version":3,"sources":["Validation/index.js","components/LoginForm/index.js","App/index.js","index.js"],"names":["requiredInput","input","undefined","matchInput","allInputs","password","myInput","props","type","placeholder","meta","error","touched","LoginForm","handleSubmit","this","className","onSubmit","Field","component","name","validate","label","Component","reduxForm","form","App","submit","includes","username","SubmissionError","console","log","JSON","stringify","window","alert","initialValues","getInitialValues","reducers","formReducer","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"mMAYeA,EAAgB,SAACC,GAAD,OAC7BA,OAAQC,EAAH,mFAKQC,EAAa,SAACF,EAAOG,GAAR,OAAqBH,IAAUG,EAAUC,cAAWH,EAAY,4G,OCbtFI,EAAU,SAACC,GACwBA,EAAhCN,MAAgCM,EAAzBC,KAAyBD,EAAnBE,YADK,IACQC,EAAMH,EAANG,KACjC,OACI,eAAC,WAAD,WACA,iDAAWH,EAAMN,OAAjB,IAAwBO,KAAMD,EAAMC,KAAMC,YAAaF,EAAME,eAE5DC,EAAKC,OACND,EAAKE,SACL,8BACGF,EAAKC,YAMRE,E,4JACJ,WAAW,IACFC,EAAgBC,KAAKR,MAArBO,aACP,OACE,uBAAME,UAAU,OAAOC,SAAUH,EAAjC,UACE,cAACI,EAAA,EAAD,CAAOF,UAAU,aACfG,UAAWb,EACXc,KAAK,WACLZ,KAAK,OACLC,YAAY,wFAEZY,SAAU,CAACrB,KAEb,cAACkB,EAAA,EAAD,CAAOF,UAAU,aACfG,UAAWb,EACXc,KAAK,WACLZ,KAAK,WACLC,YAAY,uCACZY,SAAU,CAACrB,KAEb,cAACkB,EAAA,EAAD,CAAOF,UAAU,aACfG,UAAWb,EACXc,KAAK,mBACLZ,KAAK,WACLC,YAAY,0GACZY,SAAU,CAACrB,EAAeG,KAE5B,wBAAQa,UAAU,cAAcR,KAAK,SAASc,MAAM,SAApD,6C,GA3BgBC,aAqCTV,EAJfA,EAAYW,YAAW,CACrBC,KAAM,SADID,CAERX,G,QClBWa,E,4MA7BbC,OAAS,SAAA1B,GACP,GAAG,CAAC,iCAAS,2BAAQ,2BAAQ,kCAAS2B,SAAU3B,EAAM4B,UACpD,MAAM,IAAIC,IAAiB,CACzBD,SAAW,gLAGbE,QAAQC,IAAIC,KAAKC,UAAUjC,IAC3BkC,OAAOC,MAAOH,KAAKC,UAAUjC,K,sDAIjC,WACE,MAAO,CACL4B,SAAU,GACVxB,SAAU,M,oBAGd,WACE,OACE,eAAC,WAAD,WACE,oBAAIW,UAAU,SAAd,wBACA,cAAC,EAAD,CAAWC,SAAUF,KAAKY,OACzBU,cAAetB,KAAKuB,4B,GA1BXf,a,eCIZgB,EAAW,CAACd,K,OAAMe,GAClBC,EAAUC,YAAgBH,GAC5BI,EAAQC,YAAYH,GACxBI,IAASC,OACP,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFI,SAASC,eAAe,U","file":"static/js/main.f43fabe1.chunk.js","sourcesContent":["/* export const validate = inputs => {\n    const errors = {};\n    if (!inputs.username) {\n      errors.username = 'Введите имя пользователя';\n    } else if (inputs.username !== 'Юрчик') {\n      errors.username = 'Имя пользователя неверно';\n    }\n    if (!inputs.password) {\n      errors.password = 'Введите ваш пароль';\n    }\n    return errors;\n  }; */\n  export const requiredInput = (input) =>\n  input ? undefined : `Требуется ввод`;\n\nexport const correctInput = input =>\n  input !== 'Alina' ? 'Неправильное имя пользователя' : undefined;\n\n  export const matchInput = (input, allInputs) =>input === allInputs.password ? undefined : 'Пароль не совпадает';","\nimport React, {Component, Fragment} from 'react';\nimport {Field, reduxForm} from 'redux-form';\nimport {requiredInput, correctInput, matchInput} from '../../Validation';\n\nconst myInput = (props) =>{\n  const {input, type, placeholder, meta}=props;\n  return (\n      <Fragment>\n      <input {...props.input} type={props.type} placeholder={props.placeholder}/>\n\n      {meta.error &&\n      meta.touched &&\n      <div>\n        {meta.error}\n      </div>}\n      </Fragment>\n  )\n}\n\nclass LoginForm extends Component {\n  render () {\n    const {handleSubmit} = this.props;\n    return (\n      <form className='form' onSubmit={handleSubmit}>\n        <Field className='form_title'\n          component={myInput}\n          name=\"username\"\n          type=\"text\"\n          placeholder=\"Имя поьзователя\"\n          //validate={[requiredInput, correctInput]}\n          validate={[requiredInput]}\n        />\n        <Field className='form_title'\n          component={myInput}\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Пароль\"\n          validate={[requiredInput]}\n        />\n        <Field className='form_title'\n          component={myInput}\n          name=\"confirm-password\"\n          type=\"password\"\n          placeholder=\"Подтвердите пароль\"\n          validate={[requiredInput, matchInput]}\n        />\n        <button className=\"form_button\" type=\"submit\" label=\"submit\">Вход</button>\n      </form>\n    );\n  }\n}\n\nLoginForm = reduxForm ({\n  form: 'login',\n}) (LoginForm);\n\nexport default LoginForm;","import React, {Component, Fragment} from 'react';\nimport LoginForm from '../components/LoginForm';\nimport {SubmissionError} from 'redux-form';\n\nclass App extends Component {\n  /* submit = values => {\n    window.alert (JSON.stringify (values));\n  }; */\n  submit = input=>{\n    if(['Настя', 'Леша', 'Миша', 'Света'].includes (input.username)){\n      throw new SubmissionError ({\n        username : \"Имя пользователя уже существует\",\n      });\n    }else{\n      console.log(JSON.stringify(input));\n      window.alert (JSON.stringify(input));\n    }\n};\n\n  getInitialValues () {\n    return {\n      username: '',\n      password: '',\n    };\n  }\n  render () {\n    return (\n      <Fragment>\n        <h1 className='header'>Redux Form</h1>\n        <LoginForm onSubmit={this.submit}\n         initialValues={this.getInitialValues()}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {createStore, combineReducers} from 'redux';\nimport {reducer as formReducer} from 'redux-form';\n\nconst reducers = {form: formReducer};\nconst reducer = combineReducers(reducers);\nlet store = createStore(reducer);\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}